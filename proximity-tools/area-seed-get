#!/usr/bin/env bash
#
# SPDX-License-Identifier: AGPL-3.0-or-later

_bin="$( \
  dirname \
    "$( \
      command \
        -v \
	  "env")")"
_lib="${_bin}/../lib"
source \
  "${_lib}/libcrash-bash/crash-bash"

# shellcheck disable=SC2034
_global_variables() {
  area_bssids=()
  color=""
  quiet=""
}

_requirements() {
  _check_cmd \
    'sha256sum'
}

_checksum() {
  local \
    _string="${1}"
  echo \
    "${_string}" | \
    sha256sum | \
      awk \
        '{print $1}'
}

# Proximity score
# $@: area seed (sha256sums of area bssids)
_wifi_proximity_score() {
  local \
    _bssids=() \
    _seed=() \
    _bssid
  _bssids=(
    "$@"
  )
  for _bssid in "${_bssids[@]}"; do
    _seed+=( $( \
      _checksum \
        "${_bssid}")
    )
  done
  echo \
    "${_seed[*]}"
}

_set_overrides() {
  if [[ -v override_quiet ]]; then
    quiet="${override_quiet}"
  elif [[ -z "${quiet}" ]]; then
    quiet="y"
  fi
  if [[ -v override_color ]]; then
    color="${override_color}"
  elif [[ -z "${color}" ]]; then
    color="n"
  fi
}

# Show help usage, with an exit status.
# $1: exit status number.
_usage() {
  local \
    _exit="${1}" \
    _usage_text
  IFS='' \
    read \
      -r \
      -d '' \
      _usage_text << \
        ENDUSAGETEXT || true
Returns the area seed for a set of BSSIds
usage:
  $(_get "app" "name")
    [options]
    [area bssids]
  options:
     -h                   This message.
     -c                   Enable color output
     -v                   Enable verbose output
ENDUSAGETEXT
  _printf \
    '%s\n' \
    "${_usage_text}"
  exit \
    "${_exit}"
}

# Shows configuration options.
_show_config() {
  local \
    _resolve_date
  TZ=UTC \
    printf \
      -v _resolve_date \
      '%(%FT%R%z)T' \
      "${SOURCE_DATE_EPOCH}"
  _msg_info "${app_name} configuration"
  _msg_info "             Resolve date:   $(_get "_resolve" "date")"
  _msg_info "                   Bssids:   $(_get "area" "bssids")"
}

_globals
_global_variables
_requirements
# shellcheck disable=SC2034
while \
  getopts \
    'cvh?' \
    arg; do
  case \
    "${arg}" in
    c) override_color="y" ;;
    v) override_quiet="n" ;;
    h|?) _set_overrides && \
         _usage \
           0 ;;
    *)
    _msg_error \
      "Invalid argument '${arg}'" \
      0
    _usage \
      1
    ;;
  esac
done
shift \
  $(( \
    OPTIND - 1 \
  ))
area_bssids=(
  "$@"
)
_set_overrides
if [[ "${area_bssids[*]}" == "" ]]; then
  _msg_error \
    "no BSSIds given" \
    0
  _usage \
    1
fi
app_opts=(
  "${area_bssids[@]}"
)
_show_config
_wifi_proximity_score \
  "${app_opts[@]}"

# vim:set sw=2 sts=-1 et:
